import numpy as np

# Define admittance matrix (Y-bus)
Y_bus = np.array([
    [10-20j, -5+10j, -5+10j],
    [-5+10j, 10-20j, -5+10j],
    [-5+10j, -5+10j, 10-20j]
])

# Initialize bus voltages (slack = 1.06 + j0)
V = np.array([1.06, 1+0j, 1+0j], dtype=complex)

# Known power demands (P and Q in per unit)
P = np.array([0, -1.0, -0.5])  # Example
Q = np.array([0, -0.6, -0.3])  # Example

# Iterative Gauss-Seidel solver
def gauss_seidel(Y, V, P, Q, tol=1e-6, max_iter=100):
    for _ in range(max_iter):
        V_prev = V.copy()
        for i in range(1, len(V)):  # Skip slack bus
            sum_yv = sum(Y[i, j] * V[j] for j in range(len(V)) if j != i)
            V[i] = (1 / Y[i, i]) * ((P[i] - 1j * Q[i]) / np.conj(V[i]) - sum_yv)
        if np.allclose(V, V_prev, atol=tol):
            break
    return V

# Calculate voltages
voltages = gauss_seidel(Y_bus, V, P, Q)
print("Final Bus Voltages:", voltages)
